pitch_m0 <- brm(
pitch_f0,
informed_train_s,
family = bernoulli,
prior = pitch_p0,
sample_prior = T,
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(adapt_delta = 0.9,
max_treedepth = 20),
stan_model_args = list(stanc_options = list("--O1 "))
)
pitch_m0 <- brm(
pitch_f0,
informed_train_s,
family = bernoulli,
prior = pitch_p0,
sample_prior = T,
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(adapt_delta = 0.9,
max_treedepth = 20),
stan_model_args = list(stanc_options = list("O1"))
)
pp_check(pitch_m0, ndraws=100)
pitch_f0 <- bf(Condition ~ 1 + v1 + v2 + V3 + v4 + v5 + v6 + v7 + v8 + v9 + v10)
get_prior(pitch_f0, informed_train_s, family = bernoulli)
pitch_p0 <- c(
prior(normal(0,1), class = Intercept),
prior(normal(0,0.3), class = b)
)
pitch_m0 <- brm(
pitch_f0,
informed_train_s,
family = bernoulli,
prior = pitch_p0,
sample_prior = T,
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(adapt_delta = 0.9,
max_treedepth = 20),
stan_model_args = list(stanc_options = list("O1"))
)
pp_check(pitch_m0, ndraws=100)
pitch_f0 <- bf(Condition ~ 1 + v1 + v2 + V3 + v4 + v5 + v6 + v7 + v8 + v9 + v10)
get_prior(pitch_f0, informed_train_s, family = bernoulli)
pitch_p0 <- c(
prior(normal(0,1), class = Intercept),
prior(normal(0,0.3), class = b)
)
pitch_m0 <- brm(
pitch_f0,
informed_train_s,
family = bernoulli,
prior = pitch_p0,
sample_prior = T,
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(adapt_delta = 0.9,
max_treedepth = 20),
stan_model_args = list(stanc_options = list("O1"))
)
pp_check(pitch_m0, ndraws=100)
posterior <- as_draws_df(pitch_m0)
p1 <- ggplot(posterior) + geom_histogram(aes(prior_Intercept), fill = "red", color = "red", alpha = 0.3, bins = 50) + geom_histogram(aes(b_Intercept), fill = "green", color = "green", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check of the intercept")
p2 <- ggplot(posterior) + geom_histogram(aes(prior_b), fill = "red", color = "red", alpha = 0.3, bins = 50) + geom_histogram(aes(b_v2), fill = "green", color = "green", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check of variable v2")
gridExtra::grid.arrange(p1, p2)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, brms, bayesplot, rstanarm, msm, cmdstanr, recipes, caret)
set.seed(123)
#population size
n <- 200 #for both groups
trials <- 10
#different effect sizes: 6 from meta analysis, 4 for random noise
InformedEffectMean <- c(rep(0,4), -0.23096087, -0.55698815, -0.05472132, -0.14332350, 0.20377619, -0.41653998)
#introducing a skeptic effect mean
SkepticEffectMean <- rep(0,10)
#individual variability from population and across trials and measurement errors
IndividualSD <- 1
TrialSD <- 0.5
Error <- 0.2
Trial <- rep(1:10,100)
id_SZ <- rep(101:200, each=10)
id_CON <- rep(1:100, each=10)
CON <- data.frame(
ID = id_CON,
Trial = Trial,
Condition = "Control") %>%
mutate(v1 = NA,
v2 = NA,
V3 = NA,
v4 = NA,
v5 = NA,
v6 = NA,
v7 = NA,
v8 = NA,
v9 = NA,
v10 = NA)
SZ <- data.frame(
ID = id_SZ,
Trial = Trial,
Condition = "Schizophrenia") %>%
mutate(v1 = NA,
v2 = NA,
V3 = NA,
v4 = NA,
v5 = NA,
v6 = NA,
v7 = NA,
v8 = NA,
v9 = NA,
v10 = NA)
for (c in 1:1000){
SZ[c,4:13] <- Map(rnorm,n=1,mean = InformedEffectMean/2, sd = IndividualSD)
}
for (c in 1:1000){
CON[c,4:13] <- Map(rnorm,n=1,mean = (-InformedEffectMean)/2, sd = IndividualSD)
}
informed <- rbind(SZ,CON)
CON_S <- data.frame(
ID = id_CON,
Trial = Trial,
Condition = "Control") %>%
mutate(v1 = NA,
v2 = NA,
V3 = NA,
v4 = NA,
v5 = NA,
v6 = NA,
v7 = NA,
v8 = NA,
v9 = NA,
v10 = NA)
SZ_S <- data.frame(
ID = id_SZ,
Trial = Trial,
Condition = "Schizophrenia") %>%
mutate(v1 = NA,
v2 = NA,
V3 = NA,
v4 = NA,
v5 = NA,
v6 = NA,
v7 = NA,
v8 = NA,
v9 = NA,
v10 = NA)
for (c in 1:1000){
SZ_S[c,4:13] <- Map(rnorm, n = 1, mean = SkepticEffectMean/2, sd = IndividualSD)
}
for (c in 1:1000){
CON_S[c,4:13] <- Map(rnorm, n = 1, mean = (-SkepticEffectMean)/2, sd = IndividualSD)
}
Skeptic <- rbind(SZ_S,CON_S)
rm(SZ_S, SZ, CON_S, CON)
informed <- informed %>%
mutate(Condition = as.factor(Condition))
plot1 <- informed %>%
ggplot(aes(v1, fill = Condition)) + geom_density()
plot2 <- informed %>%
ggplot(aes(v2, fill = Condition)) + geom_density()
plot3 <- informed %>%
ggplot(aes(V3, fill = Condition)) + geom_density()
plot4 <- informed %>%
ggplot(aes(v4, fill = Condition)) + geom_density()
plot5 <- informed %>%
ggplot(aes(v5, fill = Condition)) + geom_density()
plot6 <- informed %>%
ggplot(aes(v6, fill = Condition)) + geom_density()
plot7 <- informed %>%
ggplot(aes(v7, fill = Condition)) + geom_density()
plot8 <- informed %>%
ggplot(aes(v8, fill = Condition)) + geom_density()
plot9 <- informed %>%
ggplot(aes(v9, fill = Condition)) + geom_density()
plot10 <- informed %>%
ggplot(aes(v10, fill = Condition)) + geom_density()
gridExtra::grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10)
rm(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10)
Skeptic <- Skeptic %>%
mutate(Condition = as.factor(Condition))
plot1S <- Skeptic %>%
ggplot(aes(v1, fill = Condition)) + geom_density()
plot2S <- Skeptic %>%
ggplot(aes(v2, fill = Condition)) + geom_density()
plot3S <- Skeptic %>%
ggplot(aes(V3, fill = Condition)) + geom_density()
plot4S <- Skeptic %>%
ggplot(aes(v4, fill = Condition)) + geom_density()
plot5S <- Skeptic %>%
ggplot(aes(v5, fill = Condition)) + geom_density()
plot6S <- Skeptic %>%
ggplot(aes(v6, fill = Condition)) + geom_density()
plot7S <- Skeptic %>%
ggplot(aes(v7, fill = Condition)) + geom_density()
plot8S <- Skeptic %>%
ggplot(aes(v8, fill = Condition)) + geom_density()
plot9S <- Skeptic %>%
ggplot(aes(v9, fill = Condition)) + geom_density()
plot10S <- Skeptic %>%
ggplot(aes(v10, fill = Condition)) + geom_density()
gridExtra::grid.arrange(plot1S, plot2S, plot3S, plot4S, plot5S, plot6S, plot7S, plot8S, plot9S, plot10S)
rm(plot1S, plot2S, plot3S, plot4S, plot5S, plot6S, plot7S, plot8S, plot9S, plot10S)
informed <- informed %>%
mutate(pair=ID) %>%
mutate(pair= ifelse(ID > 100, ID-100, ID) ) %>%
mutate(dummy = ifelse(Condition == "Schizophrenia", 1, 0)) %>%
mutate(dummy = as.factor(dummy))
#if ID is above 100 subtract 100 from ID if not keep the id
Skeptic <- Skeptic %>%
mutate(pair=ID) %>%
mutate(pair= ifelse(ID > 100, ID-100, ID) )%>%
mutate(dummy = ifelse(Condition == "Schizophrenia", 1, 0))%>%
mutate(dummy = as.factor(dummy))
# splitting informed into test and train
sample1 <- sample(seq(100), 80)
informed_train <- subset(informed, pair %in% sample1)
informed_test <- subset(informed, !pair %in% sample1)
# splitting skeptic into test and train
sample2 <- sample(seq(100), 80)
Skeptic_train <- subset(Skeptic, pair %in% sample2)
Skeptic_test <- subset(Skeptic, !pair %in% sample2)
# subset conditioned by if column is in the sample column
rec_informed <- informed_train %>%
recipe(Condition ~ .) %>%
update_role(ID, pair, new_role = "ID") %>%
step_scale(all_numeric()) %>%
step_center(all_numeric()) %>%
step_dummy(Condition) %>%
prep(training = informed_train, retain = TRUE)
summary(rec_informed)
rec_skeptic <- Skeptic_train %>%
recipe(Condition ~ .) %>%
update_role(ID, pair, new_role = "ID") %>%
step_scale(all_numeric()) %>%
step_center(all_numeric()) %>%
step_dummy(Condition) %>%
prep(training = Skeptic_train, retain = TRUE)
summary(rec_skeptic)
#Once the data are ready for transformation, the juices() extract transformed training set while the bake() function create a new testing set.
#Juice
informed_train_s <- juice(rec_informed)
skeptic_train_s <- juice(rec_skeptic)
#Bake
informed_test_s <- bake(rec_informed, new_data = informed_test)
skeptic_test_s <- bake(rec_skeptic, new_data = Skeptic_test)
informed_train_s <- informed_train_s %>%
mutate(Condition = as.factor(Condition_Schizophrenia))
skeptic_train_s <- skeptic_train_s %>%
mutate(Condition = as.factor(Condition_Schizophrenia))
informed_test_s <- informed_test_s %>%
mutate(Condition = as.factor(Condition_Schizophrenia))
skeptic_test_s <- skeptic_test_s %>%
mutate(Condition = as.factor(Condition_Schizophrenia))
informed_train_s %>%
mutate(Condition = as.numeric(Condition)-1) %>%
ggplot() +
geom_point(aes(v6, Condition, color = Condition))+
geom_smooth(aes(v6, Condition), method = "glm", method.args = list(family = "binomial"))+ theme_bw()
#informed model
pitch_f0 <- bf(Condition ~ 1 + v1 + v2 + V3 + v4 + v5 + v6 + v7 + v8 + v9 + v10)
get_prior(pitch_f0, informed_train_s, family = bernoulli)
pitch_p0 <- c(
prior(normal(0, 1), class = Intercept),
prior(normal(0, 0.3), class = b))
pitch_m0 <- brm(
pitch_f0,
informed_train_s,
family = bernoulli,
prior = pitch_p0,
sample_prior = T,
backend = "cmdstanr",
chains = 2,
cores = 6,
threads = threading(2),
control = list(adapt_delta = 0.9,
max_treedepth = 20),
stan_model_args = list(stanc_options = list("O1"))
)
pp_check(pitch_m0, ndraws=100)
summary(pitch_m0)
posterior <- as_draws_df(pitch_m0)
p1 <- ggplot(posterior) + geom_histogram(aes(prior_Intercept), fill = "red", color = "red", alpha = 0.3, bins = 50) + geom_histogram(aes(b_Intercept), fill = "green", color = "green", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check of the intercept - informed")
p2 <- ggplot(posterior) + geom_histogram(aes(prior_b), fill = "red", color = "red", alpha = 0.3, bins = 50) + geom_histogram(aes(b_v2), fill = "green", color = "green", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check of variable v2 - informed")
gridExtra::grid.arrange(p1, p2)
#Skeptic model
pitch_m0_s <- brm(
pitch_f0,
skeptic_train_s,
family = bernoulli,
prior = pitch_p0,
sample_prior = T,
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(adapt_delta = 0.9,
max_treedepth = 20),
stan_model_args = list(stanc_options = list("O1"))
)
pp_check(pitch_m0_s, ndraws=100)
summary(pitch_m0_s)
posterior <- as_draws_df(pitch_m0_s)
p1s <- ggplot(posterior) + geom_histogram(aes(prior_Intercept), fill = "red", color = "red", alpha = 0.3, bins = 50) + geom_histogram(aes(b_Intercept), fill = "green", color = "green", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check of the intercept - informed")
p2s <- ggplot(posterior) + geom_histogram(aes(prior_b), fill = "red", color = "red", alpha = 0.3, bins = 50) + geom_histogram(aes(b_v2), fill = "green", color = "green", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check of variable v2 - informed")
gridExtra::grid.arrange(p1s, p2s)
# AVERAGE CONFUSION MATRIX PREDICTIONS
pacman::p_load(caret)
# Informed train accuracy
informed_train_s1 <- informed_train_s
informed_train_s1$PredictionPerc0 <- predict(pitch_m0)[, 1]
informed_train_s1$Predictions0[informed_train_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
informed_train_s1$Predictions0[informed_train_s1$PredictionPerc0 <= 0.5] <- "Control"
informed_train_s1 <- informed_train_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
# Informed test accuracy
informed_test_s1 <- informed_test_s
informed_test_s1$PredictionPerc0 <- predict(pitch_m0, newdata = informed_test_s1, allow_new_levels = T)[, 1]
informed_test_s1$Predictions0[informed_test_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
informed_test_s1$Predictions0[informed_test_s1$PredictionPerc0 <= 0.5] <- "Control"
informed_test_s1 <- informed_test_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
# Skeptic train accuracy
skeptic_train_s1 <- skeptic_train_s
skeptic_train_s1$PredictionPerc0 <- predict(pitch_m0_s)[, 1]
skeptic_train_s1$Predictions0[skeptic_train_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
skeptic_train_s1$Predictions0[skeptic_train_s1$PredictionPerc0 <= 0.5] <- "Control"
skeptic_train_s1 <- skeptic_train_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
#Skeptic test accuracy
skeptic_test_s1 <- skeptic_test_s
skeptic_test_s1$PredictionPerc0 <- predict(pitch_m0_s, newdata = skeptic_test_s1, allow_new_levels = T)[, 1]
skeptic_test_s1$Predictions0[skeptic_test_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
skeptic_test_s1$Predictions0[skeptic_test_s1$PredictionPerc0 <= 0.5] <- "Control"
skeptic_test_s1 <- skeptic_test_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
# Confusion Matrices
confusionMatrix(data = informed_train_s1$Predictions0,
reference = informed_train_s1$Condition)
confusionMatrix(data = informed_test_s1$Predictions0,
reference = informed_test_s1$Condition)
confusionMatrix(data = skeptic_train_s1$Predictions0,
reference = skeptic_train_s1$Condition)
confusionMatrix(data = skeptic_test_s1$Predictions0,
reference = skeptic_test_s1$Condition)
# Setting up the data frame
ConfProb <- tibble(
expand_grid(
sample = seq(1600),
setup = c("informed", "skeptic"),
type = c("training", "test")
)
)
# AVERAGE CONFUSION MATRIX PREDICTIONS
pacman::p_load(caret)
# Informed train accuracy
informed_train_s1 <- informed_train_s
informed_train_s1$PredictionPerc0 <- predict(pitch_m0)[, 1]
informed_train_s1$Predictions0[informed_train_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
informed_train_s1$Predictions0[informed_train_s1$PredictionPerc0 <= 0.5] <- "Control"
informed_train_s1 <- informed_train_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
# Informed test accuracy
informed_test_s1 <- informed_test_s
informed_test_s1$PredictionPerc0 <- predict(pitch_m0, newdata = informed_test_s1, allow_new_levels = T)[, 1]
informed_test_s1$Predictions0[informed_test_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
informed_test_s1$Predictions0[informed_test_s1$PredictionPerc0 <= 0.5] <- "Control"
informed_test_s1 <- informed_test_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
# Skeptic train accuracy
skeptic_train_s1 <- skeptic_train_s
skeptic_train_s1$PredictionPerc0 <- predict(pitch_m0_s)[, 1]
skeptic_train_s1$Predictions0[skeptic_train_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
skeptic_train_s1$Predictions0[skeptic_train_s1$PredictionPerc0 <= 0.5] <- "Control"
skeptic_train_s1 <- skeptic_train_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
#Skeptic test accuracy
skeptic_test_s1 <- skeptic_test_s
skeptic_test_s1$PredictionPerc0 <- predict(pitch_m0_s, newdata = skeptic_test_s1, allow_new_levels = T)[, 1]
skeptic_test_s1$Predictions0[skeptic_test_s1$PredictionPerc0 > 0.5] <- "Schizophrenia"
skeptic_test_s1$Predictions0[skeptic_test_s1$PredictionPerc0 <= 0.5] <- "Control"
skeptic_test_s1 <- skeptic_test_s1 %>%
mutate(Condition =
ifelse(Condition == "1", "Schizophrenia", "Control"),
Condition = as.factor(Condition),
Predictions0 = as.factor(Predictions0)
)
# Confusion Matrices
confusionMatrix(data = informed_train_s1$Predictions0,
reference = informed_train_s1$Condition)
confusionMatrix(data = informed_test_s1$Predictions0,
reference = informed_test_s1$Condition)
confusionMatrix(data = skeptic_train_s1$Predictions0,
reference = skeptic_train_s1$Condition)
confusionMatrix(data = informed_test_s1$Predictions0,
reference = informed_test_s1$Condition)
confusionMatrix(data = skeptic_train_s1$Predictions0,
reference = skeptic_train_s1$Condition)
confusionMatrix(data = skeptic_test_s1$Predictions0,
reference = skeptic_test_s1$Condition)
Empirical_df <- read_cmdstan_csv("Ass3_empiricalData1.csv")
Empirical_df <- read_cmdstan_csv(files = "Ass3_empiricalData1.csv")
Empirical_df <- read_csv(files = "Ass3_empiricalData1.csv")
pacman::p_load(tidyverse)
pacman::p_load(tidyverse)
pacman::p_load("tidyverse")
Empirical_df <- read_csv(files = "Ass3_empiricalData1.csv")
library(tidyverse)
pacman::p_load("tidyverse")
Empirical_df <- read_csv(files = "Ass3_empiricalData1.csv")
pacman::p_load("readr")
readr::read_csv()
Empirical_df <- read_csv(files = "Ass3_empiricalData1.csv")
Empirical_df <- read_csv("Ass3_empiricalData1.csv")
View(Empirical_df)
d <- read_csv("Ass3_empiricalData1.csv")
pacman::p_load(ggplot2, tidytext, validate, learntidymodels)
d_num <- select_if(d, is.numeric)
#d_num$Condition <- d$Diagnosis
PCA <- d_num[,-2]
rec_PCA <- recipe(~., data = PCA) %>%
update_role(PatID, new_role = "ID") %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors(), num_comp = 5)
pca_prep <- prep(rec_PCA)
tidied_pca <- tidy(pca_prep, 2)
# Exploring results of PCA
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = F) +
facet_wrap(~ component, nrow = 1) +
labs(y = NULL)
# Exploring results of PCA
?fct_inorder()
pacman::p_load(ggplot2, tidytext, validate, learntidymodels)
pacman::p_load(ggplot2, tidytext, validate, learntidymodels, forcats)
d <- read_csv("Ass3_empiricalData1.csv")
pacman::p_load(ggplot2, tidytext, forcats)
d_num <- select_if(d, is.numeric)
#d_num$Condition <- d$Diagnosis
PCA <- d_num[,-2]
rec_PCA <- recipe(~., data = PCA) %>%
update_role(PatID, new_role = "ID") %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors(), num_comp = 5)
pca_prep <- prep(rec_PCA)
tidied_pca <- tidy(pca_prep, 2)
# Exploring results of PCA
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = F) +
facet_wrap(~ component, nrow = 1) +
labs(y = NULL)
# Ranked results of PCA
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~ component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribqution",
y = NULL, fill = "Positive?"
)
View(d)
View(PCA)
View(d)
View(PCA)
