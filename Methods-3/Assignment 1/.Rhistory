knitr::opts_chunk$set(echo = TRUE)
"### Participant information ###"
# paste n() unique participants
paste('Children participating:', length(unique(d$Child.ID)))
pacman::p_load(tidyverse, dplyr, brms)
d <- read_csv("CleanedChild_Data.csv")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, dplyr, brms)
d <- read_csv("CleanedChild_Data.csv")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, dplyr, brms)
d <- read_csv("CleanedChild_Data.csv")
pacman::p_load(tidyverse, dplyr, brms)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, dplyr, brms)
d <- read_csv("CleanedChild_Data.csv")
library(tidyverse)
pacman::p_load(tidyverse, dplyr, brms)
d <- read_csv("CleanedChild_Data.csv")
pacman::p_load(tidyverse, dplyr, brms)
d <- read_csv("CleanedChild_Data.csv")
load(tidyverse)
library(tidyverse)
library(tidyverse)
d <- read_csv("CleanedChild_Data.csv")
library(tidyverse)
d <- read_csv("CleanedChild_Data.csv")
pacman::p_load(tidyverse, dplyr, brms)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
d <- read_csv("CleanedChild_Data.csv")
d %>% group_by(Diagnosis) %>% count(n())
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
d <- read_csv("CleanedChild_Data.csv")
d %>% group_by(Diagnosis) %>% count(n())
#Simulation function
simulation <- function(seed, n){
#Defining the different parameters for the model
sigma_asd_intercept <- sqrt(log(0.5^2/1.5^2 + 1))
sigma_td_intercept <- sqrt(log(0.3^2/1.5^2 + 1))
mu_asd_intercept <- log(1.5/exp(0.5*sigma_asd_intercept^2))
mu_td_intercept <- log(1.5/exp(0.5*sigma_td_intercept^2))
sigma_asd_slope <- sqrt(log(0.4^2/(1.5*0.4)^2 + 1))
sigma_td_slope <- sqrt(log(0.2^2/(1.5*0.6)^2 + 1))
mu_asd_slope <- log((1.5*0.4)/exp(0.5*sigma_asd_slope^2))
mu_td_slope <- log((1.5*0.6)/exp(0.5*sigma_td_slope^2))
#Setting the seed
set.seed(seed)
#Converting it into a data frame
parameters <- tibble(Diagnosis = rep(c("ASD", "TD"), each = ceiling(n/2))) %>% mutate(
Condition = ifelse(Diagnosis == "ASD", 0, 1),
Intercept = ifelse(Diagnosis == "ASD",
rlnorm(n, mu_asd_intercept, sigma_asd_intercept),
rlnorm(n, mu_td_intercept, sigma_td_intercept)),
Slope = ifelse(Diagnosis == "ASD",
rlnorm(n, mu_asd_slope, sigma_asd_slope),
rlnorm(n, mu_td_slope, sigma_td_slope)),
Kid = seq(n))
grid <- tibble(
expand_grid(Kid = seq(n),
Visit = seq(6))
)
df <- merge(parameters, grid)
for (i in seq(nrow(df))){
df$MLU[i] <- rnorm(1, df$Intercept[i] + df$Slope[i] * (df$Visit[i] - 1))
}
return(df)
}
SimD <- simulation(123, 100)
SimD %>%
ggplot(aes(x = Visit, y = MLU, color = Diagnosis, group = Kid)) + geom_point() + geom_line(alpha = 0.3)
#define the formula
#Evt lave flere versioner formula_1, formula_2 osv (slide 37 i week 4)
MLUformula <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + (1+Visit|Kid))
MLUformula_1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit)
#define the prior
get_prior(MLUformula,
data = SimD,
family = lognormal)
get_prior(MLUformula_1,
data = SimD,
family = lognormal)
#Værdier skal specificeres her!! ikke de rigtige tal!
MLU_prior <- c(
prior(normal(0.5, 0.3), class = b),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisTD"),
prior(normal(0.3, 0.1), class = sd, coef = Intercept, group = Kid),
prior(normal(0.05, 0.1), class = sd, coef = Visit, group = Kid))
MLU_prior_1 <- c(
prior(normal(0.5, 0.3), class = b),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisTD"))
#prior predictive checks
MLU_model_prior <-
brm(
MLUformula,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior,
file = "MLU_model_prior",
#refit = "on_change",
sample_prior = "only",
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
pp_check(MLU_model_prior, ndraws=100)
MLU_model_prior_1 <-
brm(
MLUformula_1,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior_1,
file = "MLU_model_prior_1",
#refit = "on_change",
sample_prior = "only",
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
pp_check(MLU_model_prior_1, ndraws=100)
#fit the model
MLU_model <-
brm(
MLUformula,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior,
file = "MLU_model",
#refit = "on_change",
sample_prior = T,
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
MLU_model_1 <-
brm(
MLUformula_1,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior_1,
file = "MLU_model_1",
#refit = "on_change",
sample_prior = T,
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
#model quality checks: posterior predictive checks, prior-posterior update checks
pp_check(MLU_model, ndraws=100)
pp_check(MLU_model_1, ndraws=100)
#k-fold cross validation for the two models
kfold_m1 <- kfold (MLU_model, folds = "stratified", group = "Diagnosis", K = 5, save_fits = TRUE, cores = 4)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
d <- read_csv("CleanedChild_Data.csv")
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
d <- read_csv("CleanedChild_Data.csv")
library(tidyverse)
d <- read_csv("CleanedChild_Data.csv")
library(tidyverse)
update.packages("dbplyr")
library(tidyverse)
update.packages("dbplyr")
library(tidyverse)
install.packages("dbplyr")
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
devtools::install_github("tidyverse/tidyverse")
devtools::install_github("tidyverse/tidyverse")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
library(pacman)
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
pacman::p_load(tidyverse, dplyr, brms, bayesplot)
devtools::install_github("tidyverse/tidyverse")
d <- read_csv("CleanedChild_Data.csv")
d %>% group_by(Diagnosis) %>% count(n())
#Simulation function
simulation <- function(seed, n){
#Defining the different parameters for the model
sigma_asd_intercept <- sqrt(log(0.5^2/1.5^2 + 1))
sigma_td_intercept <- sqrt(log(0.3^2/1.5^2 + 1))
mu_asd_intercept <- log(1.5/exp(0.5*sigma_asd_intercept^2))
mu_td_intercept <- log(1.5/exp(0.5*sigma_td_intercept^2))
sigma_asd_slope <- sqrt(log(0.4^2/(1.5*0.4)^2 + 1))
sigma_td_slope <- sqrt(log(0.2^2/(1.5*0.6)^2 + 1))
mu_asd_slope <- log((1.5*0.4)/exp(0.5*sigma_asd_slope^2))
mu_td_slope <- log((1.5*0.6)/exp(0.5*sigma_td_slope^2))
#Setting the seed
set.seed(seed)
#Converting it into a data frame
parameters <- tibble(Diagnosis = rep(c("ASD", "TD"), each = ceiling(n/2))) %>% mutate(
Condition = ifelse(Diagnosis == "ASD", 0, 1),
Intercept = ifelse(Diagnosis == "ASD",
rlnorm(n, mu_asd_intercept, sigma_asd_intercept),
rlnorm(n, mu_td_intercept, sigma_td_intercept)),
Slope = ifelse(Diagnosis == "ASD",
rlnorm(n, mu_asd_slope, sigma_asd_slope),
rlnorm(n, mu_td_slope, sigma_td_slope)),
Kid = seq(n))
grid <- tibble(
expand_grid(Kid = seq(n),
Visit = seq(6))
)
df <- merge(parameters, grid)
for (i in seq(nrow(df))){
df$MLU[i] <- rnorm(1, df$Intercept[i] + df$Slope[i] * (df$Visit[i] - 1))
}
return(df)
}
SimD <- simulation(123, 100)
View(SimD)
SimD %>%
ggplot(aes(x = Visit, y = MLU, color = Diagnosis, group = Kid)) + geom_point() + geom_line(alpha = 0.3)
#define the formula
#Evt lave flere versioner formula_1, formula_2 osv (slide 37 i week 4)
MLUformula <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + (1+Visit|Kid))
MLUformula_1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit)
#define the prior
get_prior(MLUformula,
data = SimD,
family = lognormal)
get_prior(MLUformula_1,
data = SimD,
family = lognormal)
#Værdier skal specificeres her!! ikke de rigtige tal!
MLU_prior <- c(
prior(normal(0.5, 0.3), class = b),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisTD"),
prior(normal(0.3, 0.1), class = sd, coef = Intercept, group = Kid),
prior(normal(0.05, 0.1), class = sd, coef = Visit, group = Kid))
MLU_prior_1 <- c(
prior(normal(0.5, 0.3), class = b),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.2, 0.1), class = b, coef = "DiagnosisTD"))
#prior predictive checks
MLU_model_prior <-
brm(
MLUformula,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior,
file = "MLU_model_prior",
#refit = "on_change",
sample_prior = "only",
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
pp_check(MLU_model_prior, ndraws=100)
MLU_model_prior_1 <-
brm(
MLUformula_1,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior_1,
file = "MLU_model_prior_1",
#refit = "on_change",
sample_prior = "only",
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
pp_check(MLU_model_prior_1, ndraws=100)
#fit the model
MLU_model <-
brm(
MLUformula,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior,
file = "MLU_model",
#refit = "on_change",
sample_prior = T,
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
MLU_model_1 <-
brm(
MLUformula_1,
data = SimD,
save_pars = save_pars(all = TRUE),
family = gaussian,
prior = MLU_prior_1,
file = "MLU_model_1",
#refit = "on_change",
sample_prior = T,
iter = 5000,
warmup = 1000,
cores = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
control = list(
adapt_delta = 0.999,
max_treedepth = 20))
#model quality checks: posterior predictive checks, prior-posterior update checks
pp_check(MLU_model, ndraws=100)
pp_check(MLU_model_1, ndraws=100)
n_sim <- 1
s <- tibble(seed = 1:n_sim) %>%
mutate(d = map(seed, simulation, n = 50)) %>%
mutate(fit = map2(d, seed, ~update(MLU_model, newdata = .x, seed = .y)))
head(s)
parameters <-
s %>%
mutate(DiagnosisTD = map(fit, ~ fixef(.) %>%
data.frame() %>%
rownames_to_column("parameter"))) %>%
unnest(DiagnosisTD)
parameters <-
s %>%
mutate(DiagnosisTD = map(fit, ~ fixef(.) %>%
data.frame() %>%
rownames_to_column("parameter"))) %>%
unnest(DiagnosisTD)
parameters %>%
select(-d, -fit) %>%
filter(parameter == "DiagnosisTD") %>%
head()
parameters %>%
filter(parameter == "DiagnosisTD") %>%
ggplot(aes(x = seed, y = Estimate, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept=c(0,.5), color = "white") +
geom_pointrange(fatten = 1/2) +
labs(x = "seed (i.e., simulation index)",
y = expression(beta[1]))
parameters %>%
filter(parameter == "DiagnosisTD") %>%
mutate(check = ifelse(Q2.5 > 0, 1, 0)) %>%
summarise(power = mean(check))
head(s)
n_sim <- 5
n_sim <- 5
s <- tibble(seed = 1:n_sim) %>%
mutate(d = map(seed, simulation, n = 50)) %>%
mutate(fit = map2(d, seed, ~update(MLU_model, newdata = .x, seed = .y)))
View(d)
head(s)
parameters <-
s %>%
mutate(DiagnosisTD = map(fit, ~ fixef(.) %>%
data.frame() %>%
rownames_to_column("parameter"))) %>%
unnest(DiagnosisTD)
d %>% group_by(Child.ID) %>% conunt(n(Visit))
d %>% group_by(Child.ID) %>% conunt(n())
d %>% group_by(Child.ID)
d %>% group_by(Child.ID) %>%  count(n())
d %>% group_by(Child.ID) %>%  arrange(count(n()))
d %>% group_by(Child.ID) %>%  count(n()) %>% arrange()
d %>% group_by(Child.ID) %>%  count(n()) %>% arrange(n())
d %>% group_by(Child.ID) %>%  count(n()) %>% arrange(Visit)
df_test<- d %>% group_by(Child.ID) %>%  count(n())
View(df_test)
rm(df_test)
TD_D <- d %>% filter(Diagnosis == "TD" ) %>% filter(Visit == 1)
#Splitting dataframes into ASD and TD:
ASD_D <- d %>% filter(Diagnosis == "ASD" ) Filter(==Visit == 1)
TD_D <- d %>% filter(Diagnosis == "TD" ) %>% filter(Visit == 1)
#Splitting dataframes into ASD and TD:
ASD_D <- d %>% filter(Diagnosis == "ASD" ) %>%  filter(==Visit == 1)
#Splitting dataframes into ASD and TD:
ASD_D <- d %>% filter(Diagnosis == "ASD" ) %>%  filter(Visit == 1)
"### Participant information ###"
# paste n() unique participants
paste('Children participating:', length(unique(d$Child.ID)))
#Splitting dataframes into ASD and TD:
ASD_D <- d %>% filter(Diagnosis == "ASD" ) %>%  filter(Visit == 1)
TD_D <- d %>% filter(Diagnosis == "TD" ) %>% filter(Visit == 1)
#n() unique participants of both groups
paste("Of the 61 participants,",length(unique(ASD_D$Child.ID)),"participants have ASD, and",length(unique(TD_D$Child.ID)),"participants is typically developing")
"### Gender ### "
options(dplyr.summarise.inform = FALSE)
gender<- d %>% group_by(Diagnosis,Gender) %>% filter(Visit==1) %>% summarize(n())
paste("Of the 29 ASD participants",gender[1,3], "participants are female and",gender[2,3],"are male")
paste("Of the 32 TD participants",gender[3,3], "participants are female and",gender[4,3],"are male")
"### Age ### "
# mean age and standard deviation of ASD Children
paste("The mean age (in months) of the ASD Children is",round(mean(ASD_D$Age,na.rm = T),digits = 2),"with a standard deviation of",round(sd(ASD_D$Age,na.rm = T),2))
# mean age and standard deviation of TD Children
paste("The mean age (in months) of the TD Children is",round(mean(TD_D$Age,na.rm = T),digits = 2),"with a standard deviation of",round(sd(TD_D$Age,na.rm = T),2))
"### Non_Verbal IQ ### "
# mean nonverbal IQ and standard deviation of ASD Children
paste("The mean non-verbal IQ of the ASD Children is",round(mean(ASD_D$NonVerbalIQ,na.rm = T),digits = 2),"with a standard deviation of",round(sd(ASD_D$NonVerbalIQ,na.rm = T),2))
# mean nonverbal IQ and standard deviation of TD Children
paste("The mean non-verbal IQ of the TD Children is",round(mean(TD_D$NonVerbalIQ,na.rm = T),digits = 2),"with a standard deviation of",round(sd(TD_D$NonVerbalIQ,na.rm = T),2))
"### Verbal IQ ### "
# mean verbal IQ and standard deviation of ASD Children
paste("The mean verbal IQ of the ASD Children is",round(mean(ASD_D$VerbalIQ,na.rm = T),digits = 2),"with a standard deviation of",round(sd(ASD_D$VerbalIQ,na.rm = T),2))
# mean verbal IQ and standard deviation of TD Children
paste("The mean verbal IQ of the TD Children is",round(mean(TD_D$VerbalIQ,na.rm = T),digits = 2),"with a standard deviation of",round(sd(TD_D$VerbalIQ,na.rm = T),2))
rm(ASD_D, TD_D)
d %>% group_by(Diagnosis) %>% count(n())
d %>% group_by(Diagnosis) %>% count(n())
d %>% group_by(Diagnosis) %>% count(n())
d %>% group_by(Diagnosis) %>% filter(Visit==1)count(n())
d %>% group_by(Diagnosis) %>% filter(Visit==1) %>% count(n())
d %>% group_by(Diagnosis) %>% filter(Visit==2) %>% count(n())
d %>% group_by(Diagnosis) %>% filter(Visit==3) %>% count(n())
d %>% group_by(Diagnosis) %>% filter(Visit==4) %>% count(n())
d %>% group_by(Diagnosis) %>% filter(Visit==5) %>% count(n())
d %>% group_by(Diagnosis) %>% filter(Visit==1) %>% count(n())
